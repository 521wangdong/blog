(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{367:function(t,e,a){"use strict";a.r(e);var r=a(45),o=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期"}},[t._v("#")]),t._v(" react 生命周期")]),t._v(" "),a("p",[t._v("目前React生命周期分为三个阶段,分别是挂载阶段、更新阶段、卸载阶段")]),t._v(" "),a("h3",{attrs:{id:"挂载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂载阶段"}},[t._v("#")]),t._v(" 挂载阶段:")]),t._v(" "),a("ul",[a("li",[t._v("constructor: 构造函数，最先被执行,我们通常在构造函数里初始化state对象或者给自定义方法绑定this")]),t._v(" "),a("li",[t._v("getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState) ,这是个静态方法,当我们接收 到新的属性想去修改我们state，可以使用getDerivedStateFromProps")]),t._v(" "),a("li",[t._v("render: render函数是纯函数，只返回需要渲染的东⻄，不应该包含其它的业务逻辑,可以返回原生的DOM、React 组件、Fragment、Portals、字符串和数字、Boolean和null等内容")]),t._v(" "),a("li",[t._v("componentDidMount: 组件装载之后调用，此时我们可以获取到DOM节点并操作，比如对canvas，svg的操作，服 务器请求，订阅都可以写在这个里面，但是记得在componentWillUnmount中取消订阅")])]),t._v(" "),a("h3",{attrs:{id:"更新阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段"}},[t._v("#")]),t._v(" 更新阶段:")]),t._v(" "),a("ul",[a("li",[t._v("getDerivedStateFromProps: 此方法在更新和挂载阶段都可能会调用")]),t._v(" "),a("li",[t._v("shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState) ,有两个参数nextProps和nextState，表示 新的属性和变化之后的state，返回一个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回 true,我们通常利用此生命周期来优化React程序性能")]),t._v(" "),a("li",[t._v("render: 更新阶段也会触发此生命周期")]),t._v(" "),a("li",[t._v("getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState) ,这个方法在render之后， componentDidUpdate之前调用，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有 一个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此生命周期必须 与componentDidUpdate搭配使用")]),t._v(" "),a("li",[t._v("componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot) ,该方法在getSnapshotBeforeUpdate 方法之后被调用，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。 第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要用到 DOM 元素的状态，则将对比或 计算的过程迁移至 getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统一触发回调或更新状态。")])]),t._v(" "),a("h3",{attrs:{id:"卸载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卸载阶段"}},[t._v("#")]),t._v(" 卸载阶段:")]),t._v(" "),a("p",[t._v("componentWillUnmount: 当我们的组件被卸载或者销毁了就会调用，我们可以在这个函数里去清除一些定时器，取 消网络请求，清理无效的DOM元素等垃圾清理工作")]),t._v(" "),a("h2",{attrs:{id:"react的请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react的请求"}},[t._v("#")]),t._v(" React的请求")]),t._v(" "),a("p",[t._v("官方推荐的异步请求是在 componentDidmount 中进行.")])])}),[],!1,null,null,null);e.default=o.exports}}]);